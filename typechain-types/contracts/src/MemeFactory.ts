/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MemeFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LIQUIDITY_FEE_PERCENTAGE"
      | "buyMeme"
      | "deployInscription"
      | "getUniswapPrice"
      | "hasLiquidity"
      | "implementation"
      | "isValidToken"
      | "mintInscription"
      | "owner"
      | "tokenToOwner"
      | "uniswapFactory"
      | "uniswapRouter"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LiquidityAdded"
      | "MemeBought"
      | "MemeDeployed"
      | "MemeMinted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "LIQUIDITY_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyMeme",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployInscription",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLiquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintInscription",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenToOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "LIQUIDITY_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyMeme", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployInscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintInscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    token: AddressLike,
    tokenAmount: BigNumberish,
    ethAmount: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    tokenAmount: bigint,
    ethAmount: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    token: string;
    tokenAmount: bigint;
    ethAmount: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeBoughtEvent {
  export type InputTuple = [
    token: AddressLike,
    buyer: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    buyer: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    token: string;
    buyer: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeDeployedEvent {
  export type InputTuple = [
    token: AddressLike,
    owner: AddressLike,
    symbol: string,
    totalSupply: BigNumberish,
    perMint: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    owner: string,
    symbol: string,
    totalSupply: bigint,
    perMint: bigint,
    price: bigint
  ];
  export interface OutputObject {
    token: string;
    owner: string;
    symbol: string;
    totalSupply: bigint;
    perMint: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeMintedEvent {
  export type InputTuple = [
    token: AddressLike,
    minter: AddressLike,
    amount: BigNumberish,
    cost: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    minter: string,
    amount: bigint,
    cost: bigint
  ];
  export interface OutputObject {
    token: string;
    minter: string;
    amount: bigint;
    cost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MemeFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MemeFactory;
  waitForDeployment(): Promise<this>;

  interface: MemeFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LIQUIDITY_FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  buyMeme: TypedContractMethod<
    [
      tokenAddr: AddressLike,
      amountOutMin: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "payable"
  >;

  deployInscription: TypedContractMethod<
    [
      symbol: string,
      totalSupply: BigNumberish,
      perMint: BigNumberish,
      price: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getUniswapPrice: TypedContractMethod<
    [tokenAddr: AddressLike, ethAmount: BigNumberish],
    [bigint],
    "view"
  >;

  hasLiquidity: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  implementation: TypedContractMethod<[], [string], "view">;

  isValidToken: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  mintInscription: TypedContractMethod<
    [tokenAddr: AddressLike],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  tokenToOwner: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  uniswapFactory: TypedContractMethod<[], [string], "view">;

  uniswapRouter: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LIQUIDITY_FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyMeme"
  ): TypedContractMethod<
    [
      tokenAddr: AddressLike,
      amountOutMin: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deployInscription"
  ): TypedContractMethod<
    [
      symbol: string,
      totalSupply: BigNumberish,
      perMint: BigNumberish,
      price: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getUniswapPrice"
  ): TypedContractMethod<
    [tokenAddr: AddressLike, ethAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasLiquidity"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isValidToken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintInscription"
  ): TypedContractMethod<[tokenAddr: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenToOwner"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "MemeBought"
  ): TypedContractEvent<
    MemeBoughtEvent.InputTuple,
    MemeBoughtEvent.OutputTuple,
    MemeBoughtEvent.OutputObject
  >;
  getEvent(
    key: "MemeDeployed"
  ): TypedContractEvent<
    MemeDeployedEvent.InputTuple,
    MemeDeployedEvent.OutputTuple,
    MemeDeployedEvent.OutputObject
  >;
  getEvent(
    key: "MemeMinted"
  ): TypedContractEvent<
    MemeMintedEvent.InputTuple,
    MemeMintedEvent.OutputTuple,
    MemeMintedEvent.OutputObject
  >;

  filters: {
    "LiquidityAdded(address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "MemeBought(address,address,uint256,uint256)": TypedContractEvent<
      MemeBoughtEvent.InputTuple,
      MemeBoughtEvent.OutputTuple,
      MemeBoughtEvent.OutputObject
    >;
    MemeBought: TypedContractEvent<
      MemeBoughtEvent.InputTuple,
      MemeBoughtEvent.OutputTuple,
      MemeBoughtEvent.OutputObject
    >;

    "MemeDeployed(address,address,string,uint256,uint256,uint256)": TypedContractEvent<
      MemeDeployedEvent.InputTuple,
      MemeDeployedEvent.OutputTuple,
      MemeDeployedEvent.OutputObject
    >;
    MemeDeployed: TypedContractEvent<
      MemeDeployedEvent.InputTuple,
      MemeDeployedEvent.OutputTuple,
      MemeDeployedEvent.OutputObject
    >;

    "MemeMinted(address,address,uint256,uint256)": TypedContractEvent<
      MemeMintedEvent.InputTuple,
      MemeMintedEvent.OutputTuple,
      MemeMintedEvent.OutputObject
    >;
    MemeMinted: TypedContractEvent<
      MemeMintedEvent.InputTuple,
      MemeMintedEvent.OutputTuple,
      MemeMintedEvent.OutputObject
    >;
  };
}
