import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

async function main() {
  console.log("🚀 开始快速部署 UniswapV2 合约...");

  const [deployer] = await ethers.getSigners();
  console.log("部署账户:", deployer.address);
  console.log("账户余额:", ethers.formatEther(await deployer.provider.getBalance(deployer.address)));

  // 1. 部署 WETH
  console.log("\n📦 部署 WETH...");
  const WETH = await ethers.getContractFactory("MockWETH");
  const weth = await WETH.deploy();
  await weth.waitForDeployment();
  const wethAddress = await weth.getAddress();
  console.log("✅ WETH 部署完成:", wethAddress);

  // 2. 部署 Factory
  console.log("\n📦 部署 UniswapV2Factory...");
  const Factory = await ethers.getContractFactory("UniswapV2Factory");
  const factory = await Factory.deploy(deployer.address);
  await factory.waitForDeployment();
  const factoryAddress = await factory.getAddress();
  console.log("✅ Factory 部署完成:", factoryAddress);

  // 3. 部署 Router
  console.log("\n📦 部署 UniswapV2Router02...");
  const Router = await ethers.getContractFactory("UniswapV2Router02");
  const router = await Router.deploy(factoryAddress, wethAddress);
  await router.waitForDeployment();
  const routerAddress = await router.getAddress();
  console.log("✅ Router 部署完成:", routerAddress);

  // 4. 更新前端地址配置
  console.log("\n📝 更新前端地址配置...");
  const addressesPath = path.join(__dirname, "../frontend/src/config/addresses.ts");
  
  const addressesContent = `// Contract addresses configuration
// Auto-generated by quickDeploy.ts

export interface ContractAddresses {
  factory: \`0x\${string}\`;
  router: \`0x\${string}\`;
  weth: \`0x\${string}\`;
}

// Default addresses for different networks
export const CONTRACT_ADDRESSES: Record<number, ContractAddresses> = {
  // Localhost (Anvil)
  31337: {
    factory: '${factoryAddress}' as \`0x\${string}\`,
    router: '${routerAddress}' as \`0x\${string}\`,
    weth: '${wethAddress}' as \`0x\${string}\`,
  },
  // Add other networks as needed
};

export function getContractAddresses(chainId: number): ContractAddresses | null {
  const addresses = CONTRACT_ADDRESSES[chainId];
  if (!addresses) {
    console.warn(\`Unsupported chain ID: \${chainId}\`);
    return null;
  }
  
  return addresses;
}
`;

  fs.writeFileSync(addressesPath, addressesContent);
  console.log("✅ 前端地址配置已更新");

  // 5. 保存部署信息
  const deploymentInfo = {
    network: "localhost",
    chainId: 31337,
    deployer: deployer.address,
    contracts: {
      weth: wethAddress,
      factory: factoryAddress,
      router: routerAddress,
    },
    timestamp: new Date().toISOString(),
  };

  const deploymentPath = path.join(__dirname, "../deployment.json");
  fs.writeFileSync(deploymentPath, JSON.stringify(deploymentInfo, null, 2));
  console.log("✅ 部署信息已保存到 deployment.json");

  console.log("\n🎉 部署完成！");
  console.log("📋 合约地址:");
  console.log("   WETH:", wethAddress);
  console.log("   Factory:", factoryAddress);
  console.log("   Router:", routerAddress);
  console.log("\n💡 现在您可以在前端使用添加流动性功能了！");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("❌ 部署失败:", error);
    process.exit(1);
  }); 